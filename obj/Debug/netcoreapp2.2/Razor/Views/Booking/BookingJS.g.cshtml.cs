#pragma checksum "C:\Users\Bamb75\source\repos\Booking2\Booking2\Views\Booking\BookingJS.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d58603bcc6471da5fbfad563e76eba9d126d3554"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Booking_BookingJS), @"mvc.1.0.view", @"/Views/Booking/BookingJS.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Booking/BookingJS.cshtml", typeof(AspNetCore.Views_Booking_BookingJS))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Bamb75\source\repos\Booking2\Booking2\Views\_ViewImports.cshtml"
using Booking2;

#line default
#line hidden
#line 2 "C:\Users\Bamb75\source\repos\Booking2\Booking2\Views\_ViewImports.cshtml"
using Booking2.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d58603bcc6471da5fbfad563e76eba9d126d3554", @"/Views/Booking/BookingJS.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"893c7a3bfe66389ea8f1866abc9f04e301048235", @"/Views/_ViewImports.cshtml")]
    public class Views_Booking_BookingJS : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
#line 3 "C:\Users\Bamb75\source\repos\Booking2\Booking2\Views\Booking\BookingJS.cshtml"
  

    var roomId = ViewBag.RoomId;


    ViewData["Title"] = "Index";


#line default
#line hidden
            BeginContext(87, 2730, true);
            WriteLiteral(@"

<style type=""text/css"">
        <!--
        #Available {
            background-color:greenyellow;
            width: 250px;
            padding: 25px;
        }
        #NotAvailable {
        background-color: red;
        width: 250px;
        padding: 25px;
        }
        h1 {
            font-size: 30px;
            margin: 24px;
        }

        -->
    </style>
<h1>Booking</h1>

<div>
    <hr />
    <dl class=""dl-horizontal"">
        <dt>Namn:</dt>
        <dd data-bind=""text: name""></dd>
    </dl>
</div>
<div data-bind=""style: {backgroundColor: isBusy() == true ? 'red' : 'green', width: '200px',
        padding: '25px'} "">
    <div id=""if-binding"">
        <p>
            <span data-bind=""if: isBusy"">
                <strong>Upptaget</strong><br />
            </span><br />
            <span data-bind=""ifnot: isBusy"">
                <strong>Ledig</strong><br />
            </span> 
            <span data-bind=""if: currentBooking() ==null"">
            ");
            WriteLiteral(@"    <span><text>Ingen bokning finns</text></span>
            </span>
            <span data-bind=""ifnot: currentBooking() == null"">
                <span><text>Ledig i <b data-bind=""text: freeMinutesLeft()""></b> minuter</text></span>
            </span>
        </p>
    </div>
</div>

<hr />
<div id=""if-binding"">
    <div data-bind=""if: isBusy"">
        <div data-bind=""whit: currentBooking()"">
            <h2>Bokad</h2>
            <p>Rummet är bokad mellan: </p>
            <h4><strong data-bind=""text:start""></strong> - <strong data-bind=""text:end""></strong></h4>

            <button data-bind=""click: removeBooking"">Ångra bokning</button>
        </div>
    </div>
    <div data-bind=""ifnot: isBusy"">
        <h2>Snabb-boka</h2>
        <button data-bind=""click: create.bind($data, 'Thirty'), disabled: isDisabled"">30 Minuter</button>
        <button data-bind=""click: create.bind($data, 'Sixty'), disabled: isDisabled"">60 Minuter</button><br />
        <button data-bind=""click: create.bin");
            WriteLiteral(@"d($data, 'Ninety'), disabled: isDisabled"">90 Minuter</button>
        <button data-bind=""click: create.bind($data, 'OneHundredTwenty'), disabled: isDisabled"">120 Minuter</button>
    </div>
</div>
<br />
<h4>Kommande möten</h4>
<table>
    <thead>
        <tr>
            <th>Namn</th>
            <th>Startar</th>
            <th>Slutar</th>
        </tr>
    </thead>

    <tbody data-bind=""foreach: meetingOftoDay()"">
        <tr>
            <td data-bind="" meetingOftoDay().UserName""></td>
            <td data-bind="" meetingOftoDay().StartDate""></td>
            <td data-bind="" meetingOftoDay().EndDate""></td>
        </tr>
 
    </tbody>
</table>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(2840, 1029, true);
                WriteLiteral(@"
    <script type=""text/javascript"">
        function Bookaroom() {
            var self = this;
            self.roomid = ko.observable(null);
            self.name = ko.observable(null);
            self.currentBooking = ko.observable([
            ]);
            self.bookings = ko.observableArray([]);
            self.isBusy = ko.observable();
            self.freeMinutesLeft = ko.observable();
            self.meetingOftoDay = ko.observableArray([]);
            self.isDisabled = ko.observable('false');
            self.start = ko.observable();
            self.end = ko.observable();
             //Operations
         

           // Delete
            self.removeBooking = function () {
                if (confirm('Vill ni ångra bokningen??')) {
                    var roomid = self.roomid();
                    var bookId = self.currentBooking().Id;
                    var data = ko.toJSON({""id"" : bookId, ""roomId"": roomid});
                    $.ajax({
                        u");
                WriteLiteral("rl: \'");
                EndContext();
                BeginContext(3870, 27, false);
#line 127 "C:\Users\Bamb75\source\repos\Booking2\Booking2\Views\Booking\BookingJS.cshtml"
                         Write(Url.Action("DeleteBooking"));

#line default
#line hidden
                EndContext();
                BeginContext(3897, 1485, true);
                WriteLiteral(@"',
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data:data,
                        success: function() {
                           
                            confirm(""Bokningen är borttagen."");
                            
                            
                        },
                        error: function(err) {
                            alert(err);
                        }
                    });
                };
                window.location.reload();
            };
            self.create = function (n) {
                var self = this;
                var minutesInt = 0;
                var roomid = self.roomid();
                if (n == 'Thirty') {
                    minutesInt = 30;
                    
                }
                else if (n == 'Sixty') {
                    minutesInt = 60;
                }
          ");
                WriteLiteral(@"      else if (n == 'Ninety') {
                    minutesInt = 90;
                }
                else if (n == 'OneHundredTwenty') {
                    minutesInt = 120;
                }
                else {
                    alert('Bokningen är inte registrerad!!')
                }
               
                var data = ko.toJSON({ ""roomId"": roomid, ""minutes"": minutesInt });

                $.ajax({
                    url: '");
                EndContext();
                BeginContext(5383, 29, false);
#line 169 "C:\Users\Bamb75\source\repos\Booking2\Booking2\Views\Booking\BookingJS.cshtml"
                     Write(Url.Action("CreateSpeedBook"));

#line default
#line hidden
                EndContext();
                BeginContext(5412, 621, true);
                WriteLiteral(@"',
                    cache: false,
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: data,
                    seccess: function () {
                        
                        alert(""Bokingen är registrerad!"");
                    },
                    error: (function(err) {
                        alert(err);
                    })
                });
                window.location.reload();
            };
             self.loadData= function () {
                var self = this;
                 $.getJSON('");
                EndContext();
                BeginContext(6034, 51, false);
#line 186 "C:\Users\Bamb75\source\repos\Booking2\Booking2\Views\Booking\BookingJS.cshtml"
                       Write(Url.Action("GetBookARoomJson", new { id = roomId }));

#line default
#line hidden
                EndContext();
                BeginContext(6085, 878, true);
                WriteLiteral(@"', function (b) {
                     var parsed = JSON.parse(b);

                     self.roomid(parsed.RoomId);
                     self.name(parsed.Name);
                     self.bookings(parsed.Bookings);
                     self.isBusy(parsed.IsBusy);
                     self.freeMinutesLeft(parsed.FreeMinutesLeft);
                     self.currentBooking(parsed.CurrentBooking);
                     self.meetingOftoDay(parsed.MeetingOftoDay);
                     self.start(parsed.StartDate);
                     self.end(parsed.EndDate);
                     
                 });
                
                
            }
        }

        $(function () {
            var viewModel = new Bookaroom();
            ko.applyBindings(viewModel);
            viewModel.loadData();
        });
        
        

    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
